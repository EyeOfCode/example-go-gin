basePath: /api/v1
definitions:
  dto.CreateProductRequest:
    properties:
      name:
        maxLength: 30
        minLength: 3
        type: string
      price:
        type: number
      stock:
        type: integer
    required:
    - name
    - price
    - stock
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.PingRequest:
    properties:
      url:
        type: string
    required:
    - url
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RegisterRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      name:
        maxLength: 30
        minLength: 3
        type: string
      password:
        minLength: 6
        type: string
      roles:
        items:
          type: string
        type: array
    required:
    - confirm_password
    - email
    - name
    - password
    type: object
  dto.UpdateProfileRequest:
    properties:
      name:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - name
    type: object
  handlers.HealthHandler:
    description: Health check response
    properties:
      status:
        example: ok
        type: string
    type: object
host: ${DOMAIN}
info:
  contact:
    email: champuplove@gmail.com
    name: API Support
  description: A RESTful API server with user authentication and MongoDB integration
  termsOfService: https://mywebideal.work
  title: Example Go Project API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Post the API's login
      parameters:
      - description: User login
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses: {}
      summary: Login endpoint
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Post the API's refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Refresh endpoint
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Post the API's register
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses: {}
      summary: Register endpoint
      tags:
      - auth
  /health:
    get:
      consumes:
      - application/json
      description: Get the API's health status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HealthHandler'
      summary: Health check endpoint
      tags:
      - health
  /local_upload:
    get:
      consumes:
      - application/json
      description: Get all files from the server
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Get all files
      tags:
      - uploads
    post:
      consumes:
      - multipart/form-data
      description: Upload multiple files to the server
      parameters:
      - collectionFormat: csv
        description: Multiple files to upload
        in: formData
        items:
          type: file
        name: files
        required: true
        type: array
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Upload multiple files
      tags:
      - uploads
  /local_upload/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a file from the server
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Delete a file
      tags:
      - uploads
  /ping:
    post:
      consumes:
      - application/json
      description: Post the API's ping
      parameters:
      - description: Ping details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PingRequest'
      produces:
      - application/json
      responses: {}
      summary: Ping endpoint
      tags:
      - ping
  /product:
    get:
      consumes:
      - application/json
      description: Get the API's get products
      parameters:
      - default: 1
        description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - default: 10
        description: 'Page size (default: 10)'
        in: query
        name: pageSize
        type: integer
      - description: Filter by product name
        in: query
        name: name
        type: string
      - description: Filter by product price
        in: query
        name: price
        type: number
      - description: Filter by product user ID
        in: query
        name: user_id
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Get products endpoint
      tags:
      - product
    post:
      consumes:
      - application/json
      description: Post the API's create product
      parameters:
      - description: Product details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductRequest'
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Create product endpoint
      tags:
      - product
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Get the API's delete user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Delete endpoint
      tags:
      - admin
  /user/list:
    get:
      consumes:
      - application/json
      description: Get the API's user list
      parameters:
      - default: 1
        description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - default: 10
        description: 'Page size (default: 10)'
        in: query
        name: pageSize
        type: integer
      - description: Filter by user name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: User list endpoint
      tags:
      - admin
  /user/logout:
    get:
      consumes:
      - application/json
      description: Post the API's logout
      parameters:
      - description: Refresh token
        in: header
        name: X-Refresh-Token
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Logout endpoint
      tags:
      - user
  /user/profile:
    get:
      consumes:
      - application/json
      description: Get the API's get profile
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Profile endpoint
      tags:
      - user
  /user/profile/{id}:
    put:
      consumes:
      - application/json
      description: Get the API's update user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileRequest'
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Update endpoint
      tags:
      - user
schemes:
- http
- https
securityDefinitions:
  Bearer:
    description: 'Enter the token with the `Bearer: ` prefix, e.g. "Bearer abcde12345".'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
